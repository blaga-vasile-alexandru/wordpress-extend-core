<?php

namespace WordPressExtendCore\FieldTypes;

use WordPressExtendCore\AbstractClass\Taxonomy\CustomField;
use WordPressExtendCore\Service\Core\File;
use WordPressExtendCore\Service\Core\LoadingFile;
use WordPressExtendCore\Service\Hooks\Action;
use WordPressExtendCore\WordPressExtendCore;
use WP_Term;

class MediaImage extends CustomField
{
    /** @var bool */
    public static bool $loadedLibrary = false;
    /** @var MediaImage[] */
    public static array $instances = [];
    /** @var File */
    private File $jsFile;
    /** @var string */
    private string $label = "";
    /** @var bool */
    private bool $multiple = false;
    /** @var string */
    private string $title = "";
    /** @var string */
    private string $modalButtonText = "Use this media";
    /** @var string */
    private string $buttonText = "Select image";

    /**
     * @param string $name
     */
    public function __construct(string $name)
    {
        $this->setName($name);
    }

    /**
     * @param string $name
     * @return MediaImage
     */
    public static function getInstance(string $name): MediaImage
    {
        $key = md5("{$name}");

        if (!self::isLoadedLibrary()) {
            self::setInstances($key, $name);

            /** @var MediaImage $Instance */
            $Instance = self::$instances[$key];

            Action::add('admin_enqueue_scripts', function () {
                wp_enqueue_media();
            });

            Action::add('wp_enqueue_media', function () use ($Instance) {
                $Instance->setJsFile(File::getInstance('media-upload.js', join(DIRECTORY_SEPARATOR, ["assets", "js"]), WordPressExtendCore::class));
                LoadingFile::getInstance($Instance->getJsFile())->scriptInject(action: false);
                MediaImage::setLoadedLibrary(true);
            });
        }

        return self::$instances[$key];
    }

    /**
     * @return bool
     */
    public static function isLoadedLibrary(): bool
    {
        return self::$loadedLibrary;
    }

    /**
     * @param bool $loadedLibrary
     */
    public static function setLoadedLibrary(bool $loadedLibrary): void
    {
        self::$loadedLibrary = $loadedLibrary;
    }

    /**
     * @param string $key
     * @param string $name
     * @return void
     */
    private static function setInstances(string $key, string $name): void
    {
        self::$instances[$key] = new MediaImage($name);
    }

    /**
     * @return File
     */
    public function getJsFile(): File
    {
        return $this->jsFile;
    }

    /**
     * @param File $jsFile
     * @return $this
     */
    public function setJsFile(File $jsFile): self
    {
        $this->jsFile = $jsFile;
        return $this;
    }

    /**
     * @return string
     */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
     * @param string $title
     * @return MediaImage
     */
    public function setTitle(string $title): MediaImage
    {
        $this->title = $title;
        return $this;
    }

    public function renderAdd(): void
    {
        parent::renderAdd(); // TODO: Change the autogenerated stub
        $id = "{$this->getName()}--" . wp_unique_id();
        $this->injectMediaUpload($id);

        echo <<<HTML
<div class="form-field">
    <label for="{$id}">{$this->getLabel()}</label>
    <div class="term-media-upload">
        <button class="" id="{$id}" type="button" role="button">{$this->getButtonText()}</button>
    </div>
</div>
HTML;
    }

    public function injectMediaUpload($id)
    {
        $options = [
            'value' => $this->getValue(),
            'multiple' => $this->isMultiple(),
            'name' => $this->getName(),
            'button' => [
                'text' => $this->getModalButtonText()
            ]
        ];

        $options = json_encode($options);

        wp_add_inline_script($this->getJsFile()->getHandle(), <<<JS
document.addEventListener('DOMContentLoaded', function () {
    jQuery('#{$id}').wordPressCoreExtendMediaUpload({$options})
});
JS
        );
    }

    /**
     * @return bool
     */
    public function isMultiple(): bool
    {
        return $this->multiple;
    }

    /**
     * @param bool $multiple
     * @return MediaImage
     */
    public function setMultiple(bool $multiple): MediaImage
    {
        $this->multiple = $multiple;
        return $this;
    }

    /**
     * @return string
     */
    public function getModalButtonText(): string
    {
        return $this->modalButtonText;
    }

    /**
     * @param string $modalButtonText
     * @return MediaImage
     */
    public function setModalButtonText(string $modalButtonText): MediaImage
    {
        $this->modalButtonText = $modalButtonText;
        return $this;
    }

    /**
     * @return string
     */
    public function getLabel(): string
    {
        return $this->label;
    }

    /**
     * @param string $label
     * @return MediaImage
     */
    public function setLabel(string $label): MediaImage
    {
        $this->label = $label;
        return $this;
    }

    /**
     * @return string
     */
    public function getButtonText(): string
    {
        return $this->buttonText;
    }

    /**
     * @param string $buttonText
     * @return MediaImage
     */
    public function setButtonText(string $buttonText): MediaImage
    {
        $this->buttonText = $buttonText;
        return $this;
    }

    public function renderEdit(WP_Term $term): void
    {
        parent::renderEdit($term); // TODO: Change the autogenerated stub
        $id = "{$this->getName()}--" . wp_unique_id();

        $this->injectMediaUpload($id);

        echo <<<HTML
<tr class="form-field">
    <th valign="top" scope="row">
        <label for="{$id}">{$this->getLabel()}</label>
    </th>
    <td>
        <div class="term-media-upload">
            <button class="" id="{$id}" type="button" role="button">{$this->getButtonText()}</button>
        </div>
    </td>
</tr>
HTML;
    }
}
